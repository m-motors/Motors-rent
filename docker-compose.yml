services:
  readme:
    image: alpine:latest 
    container_name: readme
    volumes:
      - ./instruction.txt:/instruction.txt
    command: cat ./instruction.txt

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
      args:
        VITE_PORT: ${VITE_PORT}
        ENV_MODE: ${ENV_MODE}
    restart: always
    ports:
      - ${VITE_PORT}:5173
    env_file:
      - .env
      - .env.local
    volumes:
      - ./frontend:/var/www
      - /var/www/node_modules

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: ./Dockerfile
      target: ${ENV_MODE}
      args:
        FLASK_INTERNAL_PORT: ${FLASK_INTERNAL_PORT}
        ENV_MODE: ${ENV_MODE}
    restart: always
    ports:
      - ${FLASK_EXTERNAL_PORT}:${FLASK_INTERNAL_PORT}
      - ${DEBUGPY_PORT}:${DEBUGPY_PORT}
    volumes:
      - ./backend:/app
    env_file:
      - .env
      - .env.local
    networks:
      - backend_net
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:17.2-alpine3.21
    container_name: ${POSTGRES_HOST}
    restart: always
    env_file:
      - .env
      - .env.local
    networks:
      - postgres_net
      - backend_net
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./database/postgres:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin", "-d", "groupe11"]
      interval: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    env_file:
      - .env
      - .env.local
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./database/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      postgres_net:
    depends_on:
      - postgres
      
networks:
  postgres_net:
    driver: bridge
  backend_net:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
